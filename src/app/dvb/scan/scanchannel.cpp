/**
   @file scanchannel.cpp
   @brief This file is part of Kalinka mediaserver.
   @author Ivan Murashko <ivan.murashko@gmail.com>

   Copyright (c) 2007-2012 Kalinka Team

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   "Software"), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

   CHANGE HISTORY

   @date
   - 2009/07/19 created by ipp (Ivan Murashko)
   - 2009/08/02 header was changed by header.py script
   - 2010/01/06 header was changed by header.py script
   - 2011/01/01 header was changed by header.py script
   - 2012/02/03 header was changed by header.py script
*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <sstream>

#include <boost/bind.hpp>
#include <boost/algorithm/string.hpp>

#include "scanchannel.h"
#include "utils.h"
#include "exception.h"
#include "scanchannel.h"

// module specific
#include "dvb/defines.h"
#include "dvb/dvbdev.h"

using namespace klk;
using namespace klk::dvb;
using namespace klk::dvb::scan;

//
// ScanChannel class
//

// Constructor
ScanChannel::ScanChannel(uint channel_no,  const IDevPtr& dev) :
    m_channel_no(channel_no), m_name(), m_provider(),
    m_video_pid(), m_audio_pid(),
    m_scrambling(true), /*scrambled by default*/
    m_dev(dev)
{
}

// Copy constructor
ScanChannel::ScanChannel(const ScanChannel& value) :
    m_channel_no(value.m_channel_no),
    m_name(value.m_name),
    m_provider(value.m_provider),
    m_video_pid(value.m_video_pid),
    m_audio_pid(value.m_audio_pid),
    m_scrambling(value.m_scrambling),
    m_dev(value.m_dev)
{
}

// Adds a video pid
void ScanChannel::addPid(uint pid, const std::string& type)
{
    PidsList *list = NULL;
    if (type == PID_VIDEO)
    {
        list = &m_video_pid;
    }
    else if (type == PID_AUDIO)
    {
        list = &m_audio_pid;
    }
    else
    {
        throw Exception(__FILE__, __LINE__,
                        "Unsopported MpegTS pid type");
    }
    BOOST_ASSERT(list);
    if (std::find(list->begin(), list->end(), pid) == list->end())
    {
        list->push_back(pid);
    }
}

// Saves the channel info to DB
void ScanChannel::save2DB(db::DB& db)
{
    if (m_name.empty())
    {
        std::stringstream tmp;
        tmp << "Channel_" << m_channel_no;
        m_name = tmp.str();
        klk_log(KLKLOG_DEBUG, "The channel has empty name. "
                "Autogenerated will be used: %s",
                m_name.c_str());
    }

    if (m_scrambling)
    {
        klk_log(KLKLOG_DEBUG, "Channel with name '%s' is scrambled "
                "and will not be stored at the DB",
                m_name.c_str());
        return;
    }

    if (m_audio_pid.empty())
    {
        klk_log(KLKLOG_DEBUG, "Channel with name '%s' does not have any "
                "audio streams and will not be stored at the DB",
                m_name.c_str());
        return;
    }

    klk_log(KLKLOG_DEBUG, "Saving scan info to database. Channel name '%s'",
            m_name.c_str());
    BOOST_ASSERT(m_dev);

    std::string sp_add = "";
    const std::string type = m_dev->getStringParam(dev::TYPE);
    if (type == dev::DVB_S)
    {
        sp_add = "klk_dvb_s_channel_addupdate";
    }
    else if (type == dev::DVB_T)
    {
        sp_add = "klk_dvb_t_channel_addupdate";
    }
    else
    {
        throw Exception(__FILE__, __LINE__,
                        "Unsopported DVB type for scan: " + type);
    }


    // check that the name is not saved before
    db::Parameters find_params;
    find_params.add("@name", m_name);
    find_params.add("@provider", m_provider);
    find_params.add("@uuid");
    find_params.add("@result_value");
    db::Result find_result =
        db.callSimple("klk_dvb_channel_find", find_params);

    // retrive uuid of the channel
    std::string uuid;
    if (find_result["@result_value"].toInt() == 0)
    {
        // we found a channel
        klk_log(KLKLOG_ERROR, "Channel '%s/%s' is already at the DB. "
                "The info about it will be updated",
                m_name.c_str(), m_provider.c_str());
        uuid = find_result["@uuid"].toString();
    }
    else
    {
        // generate new UUID
        uuid = base::Utils::generateUUID();
    }

    db::Parameters params;
    params.add("@uuid", uuid);
    params.add("@source", m_dev->getStringParam(dev::SOURCE));
    params.add("@name", m_name);
    params.add("@provider", m_provider);

    if (type == dev::DVB_T)
    {
        // `klk_dvb_t_channel_addupdate` (
        // INOUT channel VARCHAR(40),
        // IN signal_source VARCHAR(40),
        // IN name VARCHAR(50),
        // IN provider VARCHAR(50),
        // IN frequency INT,
        // IN dvb_bandwidth TINYINT,
        // IN code_rate_hp TINYINT,
        // IN code_rate_lp TINYINT,
        // IN modulation TINYINT,
        // IN transmode TINYINT,
        // IN channel_no INTEGER,
        // IN guard TINYINT,
        // IN hierarchy TINYINT,
        // OUT return_value INT

        params.add("@frequency", m_dev->getIntParam(dev::FREQUENCY));
        params.add("@dvb_bandwidth", m_dev->getIntParam(dev::DVBBANDWIDTH));
        params.add("@coderate_hp", m_dev->getIntParam(dev::CODE_RATE_HP));
        params.add("@coderate_lp", m_dev->getIntParam(dev::CODE_RATE_LP));
        params.add("@modulation", m_dev->getIntParam(dev::MODULATION));
        params.add("@transmode", m_dev->getIntParam(dev::TRANSMODE));
        params.add("@channel_no", m_channel_no);
        params.add("@guard", m_dev->getIntParam(dev::GUARD));
        params.add("@hierarchy", m_dev->getIntParam(dev::HIERARCHY));
    }
    else if (type == dev::DVB_S)
    {
        // `klk_dvb_s_channel_addupdate` (
        // INOUT channel VARCHAR(40),
        // IN signal_source VARCHAR(40),
        // IN name VARCHAR(50),
        // IN provider VARCHAR(50),
        // IN diseq_source TINYINT,
        // IN frequency INT,
        // IN polarity CHAR,
        // IN symbol_rate INT,
        // IN code_rate_hp TINYINT,
        // IN channel_no INTEGER,
        // OUT return_value INT
        params.add("@diseq_source", m_dev->getIntParam(dev::DISEQC_SRC));
        params.add("@frequency", m_dev->getIntParam(dev::FREQUENCY));
        params.add("@polarity", m_dev->getStringParam(dev::POLARITY));
        params.add("@sr", m_dev->getIntParam(dev::SYMBOL_RATE));
        params.add("@coderate_hp", m_dev->getIntParam(dev::CODE_RATE_HP));
        params.add("@channel_no", m_channel_no);
    }

    params.add("@return_value");

    db::Result result = db.callSimple(sp_add, params);
    if (result["@return_value"].toInt() != 0)
    {
        throw Exception(__FILE__, __LINE__,
                        "Failed to add/update a channel '" +
                        m_name + "'");
    }

    // clear pid table
    delPids(db, uuid);

    if (!m_video_pid.empty())
    {
        // video pids
        std::for_each(m_video_pid.begin(), m_video_pid.end(),
                      boost::bind(&ScanChannel::savePid2DB,
                                  this, boost::ref(db), uuid,
                                  PID_VIDEO, _1));
    }
    else
    {
        klk_log(KLKLOG_DEBUG, "No any video stream for channel '%s'",
                m_name.c_str());
    }

    // audio pids
    std::for_each(m_audio_pid.begin(), m_audio_pid.end(),
                  boost::bind(&ScanChannel::savePid2DB,
                              this, boost::ref(db), uuid,
                              PID_AUDIO, _1));
}

void ScanChannel::savePid2DB(db::DB& db,
                             const std::string& channel,
                             const std::string& type,
                             uint value)
{
    std::string sp_add = "klk_dvb_channel_pid_add";

    // `klk_dvb_channel_pid_add` (
    // INOUT pid VARCHAR(40),
    // IN channel VARCHAR(40),
    // IN pid_type VARCHAR(40),
    // IN pid_no INTEGER,
    // IN description VARCHAR(255),
    // OUT return_value INTEGER
    const std::string uuid = base::Utils::generateUUID();
    db::Parameters params;
    params.add("@uuid", uuid);
    params.add("@channel", channel);
    params.add("@type", type);
    params.add("@pid", value);
    params.add("@description", ""); // description
    params.add("@return_value");

    db::Result result = db.callSimple(sp_add, params);
    if (result["@return_value"].toInt() != 0)
    {
        throw Exception(__FILE__, __LINE__,
                        "Failed to add a pid for channel '" +
                        m_name + "'");
    }
}

// Sets channel name
void ScanChannel::setChannelName(const std::string& name)
{
    m_name = name;
    // remove garbage
    boost::trim_if(m_name,  boost::is_any_of(" \r\n\t"));
}

// Sets provider name
void ScanChannel::setProviderName(const std::string& name)
{
    m_provider = name;
    // remove garbage
    boost::trim_if(m_provider,  boost::is_any_of(" \r\n\t"));
}

// Clears pids for specified channel
void ScanChannel::delPids(db::DB& db, const std::string& uuid)
{
    BOOST_ASSERT(!uuid.empty());
    db::Parameters params;
    params.add("@channel", uuid);
    params.add("@return_value");
    db::Result result =
        db.callSimple("klk_dvb_channel_pid_del", params);
    if (result["@return_value"].toInt() != 0)
    {
        throw Exception(__FILE__, __LINE__,
                        "Failed to del pids for channel '" +
                        m_name + "'");
    }
}
